// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Category{
  id              Int    @id @default(autoincrement())
  name            String
  products        Product[]
}
      
model Product{
  id                String      @id @default(uuid())
  name              String     @unique  
  gendre            String  
  price             Int
  stock             Int
  description       String
  imageUrl          String
  categoryId        Int
  category          Category @relation(fields: [categoryId], references: [id])
  CartItems         CartItem[]
  orderDetails      OrderDetail[]
  createdAt         DateTime @default(now())
  updatedUt         DateTime @updatedAt()
}

model User{
  id              Int @id @default(autoincrement())
  email           String @unique
  password        String
  username        String
  refreshToken    String?
  role            String?
  address         String?
  phone           String?
  avatar          String?
  carts           CartItem[]
  orders          Order[]
  createdAt       DateTime @default(now())
  updatedUt       DateTime @updatedAt()
}


model CartItem{
  id Int          @id @default(autoincrement())
  user            User @relation(fields: [userId], references: [id])
  userId          Int
  product         Product @relation(fields: [productId],references: [id])
  productId       String
  quantity        Int @default(1)
  total           Int

  @@unique([userId,productId])
}

model Order{
  id              Int @id @default(autoincrement())
  orderId         String @default(cuid()) @unique
  totalPayment    Int
  userId          Int
  user            User @relation(fields: [userId], references: [id])
  snapToken       String?
  isPayment       Boolean @default(false)
  orderDetails    OrderDetail[]
  createdAt       DateTime @default(now())
  
}

model OrderDetail{
  order         Order @relation(fields: [orderId],references: [orderId])
  orderId       String
  product       Product @relation(fields: [productId],references: [id])
  productId     String
  quantity      Int   @default(1)
  total         Int

  @@unique([orderId,productId])

}
